/**
  ******************************************************************************
  * @file    DrehzahlRTX.ini
  * @author  Prof. Dr.-Ing. Ferdinand Englberger
  * @version V2.0.0
  * @date    11.10.2011
  * @brief   Simulationsfile für Versuch Drehzahlmessung mit RTX
  * @details Bei der Erzeugung des Lichtschrankensignals
  *          wird das erzeugte PWM-Signal nicht berücksichtigt
  *          - maximale Sensorfreuqenz 300 Hz
  *          - minimale Sensorfrequenz 60  Hz
  ******************************************************************************
  *	@par History:
  *  @details V2.0.0 Ferdinand Englberger
  *           - Startversion LPC1769
  ******************************************************************************
  * @brief
  * <h2><center>&copy; COPYRIGHT 2011 UniBwM ETTI WE 4</center></h2>
  ******************************************************************************
  */

define unsigned char SIMHEX	/*!< glob. Var.: simulierter Wert des 
                                 Hex-Drehschalters*/
define float minperiod		/*!< glob. Var.: min. Periode des Sensorsignals */
define float maxperiod		/*!< glob. Var.: max. Periode des Sensorsignals */
define float deltaperiod	/*!< glob. Var.: Perioden Anpasswert */
define float period			/*!< glob. Var.: aktuelle Periodendauer  */
define float puls			/*!< glob. Var.: aktuelle PUlsdauer */

minperiod = 1.0/300.0 /*!< Vorbelegung minimale Periodendauer */
maxperiod = 1.0/60.0  /*!< Vorbelegung maximale Periodendauer */
deltaperiod = (maxperiod - minperiod)/15 /*!< Vorbelegung Periodendifferenz */
puls = 0.0001		  /*!< Vorbelegung Pulsdauer */
PORT0 &= ~0x00000008  /*!< Vorbelegung Sensorleitung */
PORT2 = PORT2 & ~(1<<11); /*!< Run/Stop-SW Startwert */
PORT2 = PORT2 |  (1<<12); /*!< Left/Right-SW Startwert */


/**
  * @brief Signal-Funktion simuliert Run/Stopp-Taster SW1
  * @param  None
  * @retval None
  */
Signal void pushRunStop(void)
{
   printf("Press SW1\n");
   PORT2 = PORT2 | (1<<11);
   swatch(20.0e-3);
   PORT2 = PORT2 & ~(1<<11);
   printf("SW1 released\n");
}

/**
  * @brief Signal-Funktion simuliert Right/Left-Taster SW2
  * @param  None
  * @retval None
  */
Signal void pushLeftRight(void)
{
   printf("Press SW2\n");
   PORT2 = PORT2 & ~(1<<12);
   swatch(20.0e-3);
   PORT2 = PORT2 | (1<<12);
   printf("SW2 released\n");
}


/**
  * @brief Funktion simuliert die Einstellung des Hex-Drehschalters
  * @param  None
  * @retval None
  */
FUNC void setHex(void)
{
   SIMHEX = getint("Enter Hex-Value (0-15)");
   if(SIMHEX > 15)
       SIMHEX = 15;
   PORT0 = PORT0 & ~(0xF<<4) | ((~SIMHEX & 0xF)<<4);
   period = minperiod + (15-SIMHEX)*deltaperiod;
   printf("Simulierte Drehzahl %f Hz\n", 0.25/period);
   period = period - puls;   
}


/**
  * @brief Funktion simuliert das Signal der Lichtschranke
  * @details Eigenschaften
  *          - maximale Sensorfreuqenz 300 Hz 
  *          - minimale Sensorfrequenz 60  Hz
  * @details Achtung dies entspricht nicht der realen HW. Die
  * 		 Simulation berücksichtigt nicht das Antriebs-PWM.
  * @param  None
  * @retval None
  */
signal void lichtschranke(void)
{
   printf("Start der Lichtschrankensimulation\n");
   period = minperiod + (15-SIMHEX)*deltaperiod;
   printf("Simulierte Drehzahl %f Hz\n", 0.25/period);
   period = period - puls; 
   for(;;)
   {
//      period = minperiod + (15-SIMHEX)*deltaperiod - puls;
      swatch(period);
	  PORT1 |= (1<<26);
	  swatch(puls);
	  PORT1 &= ~(1<<26);
   }
}

/**
  * @brief Die Funktion stoppt die Simulation des Sensorsignals
  * @param  None
  * @retval None
  */
func void stoplichtschranke(void)
{
   printf("Lichtschrankensimulation wird angehalten\n");
   exec("signal kill lichtschranke");
}



define button "Run/Stopp" , "pushRunStop()"
define button "Left/Right", "pushLeftRight()"
define button "Set Hex-SW", "setHex()"
define button "Simulate Sensorsignal", "lichtschranke()"
define button "Stopp Sensorsignal", "stoplichtschranke()"